name: Docker Build and Publish

on:
  push:
    branches:
      - main
      # - github-actions

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      EXISTS: ${{ steps.check-version.outputs.EXISTS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Get version from package.json
        id: package-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if version exists
        id: check-version
        run: |
          if docker pull dohsimpson/habittrove:v${{ steps.package-version.outputs.VERSION }} 2>/dev/null; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: docker build -t habittrove .

      - name: Push Docker images
        run: |
          if [ "${{ steps.check-version.outputs.EXISTS }}" = "false" ]; then
            docker tag habittrove dohsimpson/habittrove:v${{ steps.package-version.outputs.VERSION }}
            docker push dohsimpson/habittrove:v${{ steps.package-version.outputs.VERSION }}
            echo "Pushed tag: v${{ steps.package-version.outputs.VERSION }}"
            docker tag habittrove dohsimpson/habittrove:latest
            docker push dohsimpson/habittrove:latest
            echo "Pushed tag: latest"
          fi
          docker tag habittrove dohsimpson/habittrove:dev
          docker push dohsimpson/habittrove:dev
          echo "Pushed tag: dev"

  deploy-demo:
    runs-on: ubuntu-latest
    needs: build-and-push
    # demo tracks the latest tag
    if: needs.build-and-push.outputs.EXISTS == 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: rollout restart -n ${{ secrets.KUBE_NAMESPACE }} deploy/${{ secrets.KUBE_DEPLOYMENT }}
